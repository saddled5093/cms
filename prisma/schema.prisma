
// datasource db defines the database connection settings.
// It's configured for SQLite.
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db" // Path to your SQLite database file
}

// generator client defines how Prisma Client is generated.
// It's set to use Prisma Client JS.
generator client {
  provider = "prisma-client-js"
}

// User model: Represents users in the application.
model User {
  id        String   @id @default(cuid()) // Unique identifier for the user
  username  String   @unique // Unique username for login
  password  String   // Hashed password
  role      UserRole @default(USER) // Role of the user (USER or ADMIN)
  notes     Note[]   // Notes created by the user
  comments  Comment[] // Comments made by the user
  createdAt DateTime @default(now()) // Timestamp of user creation
  updatedAt DateTime @updatedAt // Timestamp of last user update
}

// Note model: Represents individual notes.
model Note {
  id            String     @id @default(cuid()) // Unique identifier for the note
  title         String     // Title of the note
  content       String     // Main content of the note
  categories    Category[] @relation("NoteToCategory") // Categories the note belongs to
  tags          String?    // Tags associated with the note, stored as a JSON string
  province      String     // Province related to the note
  phoneNumbers  String?    // Phone numbers related to the note, stored as a JSON string
  eventDate     DateTime   // Date of the event the note is about
  createdAt     DateTime   @default(now()) // Timestamp of note creation
  updatedAt     DateTime   @updatedAt // Timestamp of last note update
  isArchived    Boolean    @default(false) // Whether the note is archived
  isPublished   Boolean    @default(false) // Whether the note is publicly published
  rating        Int?       @default(0) // Rating given by an admin (e.g., 0-5)
  comments      Comment[]  // Comments on this note
  author        User       @relation(fields: [authorId], references: [id]) // The user who created the note
  authorId      String     // Foreign key for the author
}

// Category model: Represents categories for notes.
model Category {
  id    String @id @default(cuid()) // Unique identifier for the category
  name  String @unique // Name of the category
  notes Note[] @relation("NoteToCategory") // Notes belonging to this category
}

// Comment model: Represents comments on notes.
model Comment {
  id        String   @id @default(cuid()) // Unique identifier for the comment
  content   String   // Content of the comment
  createdAt DateTime @default(now()) // Timestamp of comment creation
  updatedAt DateTime @updatedAt // Timestamp of last comment update
  author    User     @relation(fields: [authorId], references: [id]) // The user who wrote the comment
  authorId  String   // Foreign key for the author
  note      Note     @relation(fields: [noteId], references: [id]) // The note this comment belongs to
  noteId    String   // Foreign key for the note
}

// Enum for UserRole: Defines possible roles for a user.
enum UserRole {
  USER
  ADMIN
}
